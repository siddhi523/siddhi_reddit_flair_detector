import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

title = {"name" : [], "accuracy": []}
title['name'].append('NaiveBayesClassifier')
title['name'].append('SupportVectorMachine')
title['name'].append('LogicalRegression')
title['name'].append('RandomForestClassifier')
title['accuracy'].append(0.85)
title['accuracy'].append(0.89)
title['accuracy'].append(0.90)
title['accuracy'].append(0.90)
body = {"name" : [], "accuracy": []}
body['name'].append('NaiveBayesClassifier')
body['name'].append('SupportVectorMachine')
body['name'].append('LogicalRegression')
body['name'].append('RandomForestClassifier')
body['accuracy'].append(0.26)
body['accuracy'].append(0.39)
body['accuracy'].append(0.41)
body['accuracy'].append(0.40)
url = {"name" : [], "accuracy": []}
url['name'].append('NaiveBayesClassifier')
url['name'].append('SupportVectorMachine')
url['name'].append('LogicalRegression')
url['name'].append('RandomForestClassifier')
url['accuracy'].append(0.69)
url['accuracy'].append(0.82)
url['accuracy'].append(0.81)
url['accuracy'].append(0.82)
comments = {"name" : [], "accuracy": []}
comments['name'].append('NaiveBayesClassifier')
comments['name'].append('SupportVectorMachine')
comments['name'].append('LogicalRegression')
comments['name'].append('RandomForestClassifier')
comments['accuracy'].append(0.75)
comments['accuracy'].append(0.86)
comments['accuracy'].append(0.87)
comments['accuracy'].append(0.89)
combined_features = {"name" : [], "accuracy": []}
combined_features['name'].append('NaiveBayesClassifier')
combined_features['name'].append('SupportVectorMachine')
combined_features['name'].append('LogicalRegression')
combined_features['name'].append('RandomForestClassifier')
combined_features['accuracy'].append(0.81)
combined_features['accuracy'].append(0.91)
combined_features['accuracy'].append(0.93)
combined_features['accuracy'].append(0.94)
title = pd.DataFrame(title)
plt.subplots(figsize = (15,7))
sns.barplot(x = "name", y = "accuracy", data = title, palette = 'hot', edgecolor = sns.color_palette('dark', 7))
plt.xticks(rotation = 90)
plt.title('Models test accuracy comparison with title as feature')
plt.show()
body = pd.DataFrame(body)
plt.subplots(figsize = (15,7))
sns.barplot(x = "name", y = "accuracy", data = body, palette = 'hot', edgecolor = sns.color_palette('dark', 7))
plt.xticks(rotation = 90)
plt.title('Models test accuracy comparison with body as feature')
plt.show()
url = pd.DataFrame(url)
plt.subplots(figsize = (15,7))
sns.barplot(x = "name", y = "accuracy", data = url, palette = 'hot', edgecolor = sns.color_palette('dark', 7))
plt.xticks(rotation = 90)
plt.title('Models test accuracy comparison with url as feature')
plt.show()
comments = pd.DataFrame(comments)
plt.subplots(figsize = (15,7))
sns.barplot(x = "name", y = "accuracy", data = comments, palette = 'hot', edgecolor = sns.color_palette('dark', 7))
plt.xticks(rotation = 90)
plt.title('Models test accuracy comparison with comments as feature')
plt.show()
combined_features = pd.DataFrame(combined_features)
plt.subplots(figsize = (15,7))
sns.barplot(x = "name", y = "accuracy", data = combined_features, palette = 'hot', edgecolor = sns.color_palette('dark', 7))
plt.xticks(rotation = 90)
plt.title('Models test accuracy comparison with combined_features')
plt.show()
